;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 19/05/2025 13:05:51
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF0E  	GOTO        28
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_main:
;LED_Blink1.c,37 :: 		void main() {
;LED_Blink1.c,49 :: 		ADCON1 |= 0XF;  // outros MCUs da série PIC18F (ex. PIC18F4550 e derivados)
0x001C	0x0E0F      	MOVLW       15
0x001E	0x12C1      	IORWF       ADCON1, 1 
;LED_Blink1.c,57 :: 		TRISB.RB0 = 1;  // configura pino RB0 como entrada no PORTB
0x0020	0x8093      	BSF         TRISB, 0 
;LED_Blink1.c,58 :: 		PORTB.RB0=1; //seria opcional pois internamente, ao colocar TRISX.RX0 =1,...
0x0022	0x8081      	BSF         PORTB, 0 
;LED_Blink1.c,65 :: 		TRISD.RD0=0; // output - configura o pino como saída (=0) (consome corrente)
0x0024	0x9095      	BCF         TRISD, 0 
;LED_Blink1.c,66 :: 		LATD.RD0 = 0; // LED OFF
0x0026	0x908C      	BCF         LATD, 0 
;LED_Blink1.c,69 :: 		while(1) // True
L_main0:
;LED_Blink1.c,71 :: 		if(PORTB.RB0 ==0)   // Tecla ativada em nível lógico 0 (SE o pino estiver ..
0x0028	0xB081      	BTFSC       PORTB, 0 
0x002A	0xD00F      	BRA         L_main2
;LED_Blink1.c,74 :: 		LATD.RD0 =~LATD.RD0; // Inverte o nível lógico do LED em LATD
0x002C	0x708C      	BTG         LATD, 0 
;LED_Blink1.c,77 :: 		Delay_ms(300);     // retarda a CPU de forma que ao pressionar a tecla..
0x002E	0x0E04      	MOVLW       4
0x0030	0x6E0B      	MOVWF       R11, 0
0x0032	0x0E0C      	MOVLW       12
0x0034	0x6E0C      	MOVWF       R12, 0
0x0036	0x0E33      	MOVLW       51
0x0038	0x6E0D      	MOVWF       R13, 0
L_main3:
0x003A	0x2E0D      	DECFSZ      R13, 1, 0
0x003C	0xD7FE      	BRA         L_main3
0x003E	0x2E0C      	DECFSZ      R12, 1, 0
0x0040	0xD7FC      	BRA         L_main3
0x0042	0x2E0B      	DECFSZ      R11, 1, 0
0x0044	0xD7FA      	BRA         L_main3
0x0046	0x0000      	NOP
0x0048	0x0000      	NOP
;LED_Blink1.c,80 :: 		}  //fim do bloco IF, o qual em caso de falso (a tecla não for pressionada)
L_main2:
;LED_Blink1.c,90 :: 		} //while
0x004A	0xD7EE      	BRA         L_main0
;LED_Blink1.c,92 :: 		} // main
L_end_main:
0x004C	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [50]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0F81       [1]    PORTB
0x0F8C       [1]    LATD
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
